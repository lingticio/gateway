// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ChatCompletionMessage interface {
	IsChatCompletionMessage()
	GetRole() string
	GetContent() ChatCompletionMessageContent
	GetName() *string
}

type ChatCompletionMessageContent interface {
	IsChatCompletionMessageContent()
}

// The contents of a chat completion message part
type ChatCompletionMessageContentPart interface {
	IsChatCompletionMessageContentPart()
}

type ChatCompletionArrayContent struct {
	Parts []ChatCompletionMessageContentPart `json:"parts"`
}

func (ChatCompletionArrayContent) IsChatCompletionMessageContent() {}

type ChatCompletionAssistantMessage struct {
	// The role of the messages author, in this case `assistant`.
	Role string `json:"role"`
	// The contents of the assistant message. Required unless `toolCalls` is specified.
	Content ChatCompletionMessageContent `json:"content,omitempty"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`
	// The tool calls generated by the model, such as function calls.
	ToolCalls []*ChatCompletionMessageToolCall `json:"toolCalls,omitempty"`
	// The ID of the tool call that this message is responding to.
	ToolCallID *string `json:"toolCallId,omitempty"`
}

func (ChatCompletionAssistantMessage) IsChatCompletionMessage() {}
func (this ChatCompletionAssistantMessage) GetRole() string     { return this.Role }
func (this ChatCompletionAssistantMessage) GetContent() ChatCompletionMessageContent {
	return this.Content
}
func (this ChatCompletionAssistantMessage) GetName() *string { return this.Name }

type ChatCompletionChoice struct {
	// The index of the choice in the list of choices.
	Index int `json:"index"`
	// The chat completion message generated by the model.
	Message ChatCompletionMessage `json:"message"`
	// The reason the model stopped generating tokens. This will be "stop" if the model hit a natural stop point or a provided stop sequence,
	// - "length" if the maximum number of tokens specified in the request was reached,
	// - "content_filter" if content was omitted due to a flag from our content filters,
	// - "tool_calls" if the model called a tool, or "function_call" (deprecated) if the model called a function.
	FinishReason *FinishReason `json:"finishReason,omitempty"`
	// Log probability information for the choice.
	LogProbs *LogProbs `json:"logProbs,omitempty"`
}

// Image content part of a chat completion message
type ChatCompletionContentPartImage struct {
	// The image URL information.
	ImageURL *ChatCompletionContentPartImageURL `json:"imageUrl"`
	// The type of the content part.
	Type string `json:"type"`
}

func (ChatCompletionContentPartImage) IsChatCompletionMessageContentPart() {}

// Image URL information for an image content part
type ChatCompletionContentPartImageURL struct {
	// Either a URL of the image or the base64 encoded image data.
	URL string `json:"url"`
	// Specifies the detail level of the image. Learn more in the
	// [Vision guide](https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding).
	Detail *ImageDetail `json:"detail,omitempty"`
}

type ChatCompletionContentPartImageURLInput struct {
	URL    string       `json:"url"`
	Detail *ImageDetail `json:"detail,omitempty"`
}

// Text content part of a chat completion message
type ChatCompletionContentPartText struct {
	// The text content.
	Text string `json:"text"`
	// The type of the content part.
	Type string `json:"type"`
}

func (ChatCompletionContentPartText) IsChatCompletionMessageContentPart() {}

type ChatCompletionMessageContentPartInput struct {
	Type     string                                  `json:"type"`
	Text     *string                                 `json:"text,omitempty"`
	ImageURL *ChatCompletionContentPartImageURLInput `json:"imageUrl,omitempty"`
}

type ChatCompletionMessageInput struct {
	Role         string                                   `json:"role"`
	Content      *string                                  `json:"content,omitempty"`
	MultiContent []*ChatCompletionMessageContentPartInput `json:"multiContent,omitempty"`
	Name         *string                                  `json:"name,omitempty"`
	FunctionCall *FunctionCallInput                       `json:"functionCall,omitempty"`
	ToolCalls    []*ChatCompletionMessageToolCallInput    `json:"toolCalls,omitempty"`
	ToolCallID   *string                                  `json:"toolCallId,omitempty"`
}

type ChatCompletionMessageToolCall struct {
	// The ID of the tool call.
	ID string `json:"id"`
	// The function that the model called.
	Function *FunctionCall `json:"function"`
	// The type of the tool. Currently, only `function` is supported.
	Type string `json:"type"`
}

type ChatCompletionMessageToolCallChunk struct {
	// The index of the tool call in the list of tool calls.
	Index *int `json:"index,omitempty"`
	// The ID of the tool call.
	ID string `json:"id"`
	// The type of the tool. Currently, only "function" is supported.
	Type string `json:"type"`
	// The partial function call information.
	Function *FunctionCallChunk `json:"function,omitempty"`
}

type ChatCompletionMessageToolCallInput struct {
	// The ID of the tool call.
	ID string `json:"id"`
	// The function that the model called.
	Function *FunctionCallInput `json:"function"`
	// The type of the tool. Currently, only `function` is supported.
	Type string `json:"type"`
}

type ChatCompletionResult struct {
	// A unique identifier for the chat completion.
	ID string `json:"id"`
	// The object type, which is always "chat.completion".
	Object string `json:"object"`
	// The Unix timestamp (in seconds) of when the chat completion was created.
	Created int `json:"created"`
	// The model used for the chat completion.
	Model string `json:"model"`
	// A list of chat completion choices. Can be more than one if n is greater than 1.
	Choices []*ChatCompletionChoice `json:"choices"`
	// Usage statistics for the completion request.
	Usage *Usage `json:"usage"`
	// This fingerprint represents the backend configuration that the model runs with.
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"systemFingerprint,omitempty"`
}

type ChatCompletionStreamChunkChoice struct {
	// The index of the choice in the list of choices.
	Index int `json:"index"`
	// The partial message delta.
	Delta *ChatCompletionStreamResponseDelta `json:"delta"`
	// The reason the model stopped generating tokens.
	FinishReason *FinishReason `json:"finishReason,omitempty"`
}

type ChatCompletionStreamResponseDelta struct {
	// The role of the author of this message.
	Role string `json:"role"`
	// The partial content of the message.
	Content *string `json:"content,omitempty"`
	// The partial tool calls generated by the model.
	ToolCalls []*ChatCompletionMessageToolCallChunk `json:"toolCalls,omitempty"`
	// Deprecated. The partial function call information.
	FunctionCall *FunctionCall `json:"functionCall,omitempty"`
}

type ChatCompletionStreamResult struct {
	// A unique identifier for the chat completion. Each chunk has the same ID.
	ID string `json:"id"`
	// The object type, which is always "chat.completion.chunk".
	Object string `json:"object"`
	// The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
	Created int `json:"created"`
	// The model to generate the completion.
	Model string `json:"model"`
	// A list of chat completion choices. Can contain more than one element if n is greater than 1.
	Choices []*ChatCompletionStreamChunkChoice `json:"choices"`
	// This fingerprint represents the backend configuration that the model runs with.
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
	SystemFingerprint *string `json:"systemFingerprint,omitempty"`
	// Usage statistics for the completion request.
	Usage *Usage `json:"usage,omitempty"`
}

type ChatCompletionSystemMessage struct {
	// The role of the messages author, in this case `system`.
	Role string `json:"role"`
	// The contents of the system message.
	Content ChatCompletionMessageContent `json:"content"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`
}

func (ChatCompletionSystemMessage) IsChatCompletionMessage() {}
func (this ChatCompletionSystemMessage) GetRole() string     { return this.Role }
func (this ChatCompletionSystemMessage) GetContent() ChatCompletionMessageContent {
	return this.Content
}
func (this ChatCompletionSystemMessage) GetName() *string { return this.Name }

type ChatCompletionTextContent struct {
	Text string `json:"text"`
}

func (ChatCompletionTextContent) IsChatCompletionMessageContent() {}

type ChatCompletionTool struct {
	// Function definitions for the tool.
	Function *ChatCompletionToolFunction `json:"function,omitempty"`
	// The type of the tool. Currently, only `function` is supported.
	Type string `json:"type"`
}

type ChatCompletionToolFunction struct {
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
	// underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`
	// A description of what the function does, used by the model to choose when and
	// how to call the function.
	Description string `json:"description"`
	// Whether to enable strict schema adherence when generating the output. If set to
	// true, the model will always follow the exact schema defined in the `parameters` field.
	Strict *bool `json:"strict,omitempty"`
	// The parameters the functions accepts, described as a JSON Schema object. See the
	// [guide](https://platform.openai.com/docs/guides/function-calling) for examples,
	// and the
	// [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
	// documentation about the format.
	//
	// Omitting `parameters` defines a function with an empty parameter list.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
}

type ChatCompletionToolMessage struct {
	// The role of the messages author, in this case `tool`.
	Role string `json:"role"`
	// The contents of the tool message.
	Content ChatCompletionMessageContent `json:"content"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`
	// Tool call that this message is responding to.
	ToolCallID string `json:"toolCallId"`
}

func (ChatCompletionToolMessage) IsChatCompletionMessage()                      {}
func (this ChatCompletionToolMessage) GetRole() string                          { return this.Role }
func (this ChatCompletionToolMessage) GetContent() ChatCompletionMessageContent { return this.Content }
func (this ChatCompletionToolMessage) GetName() *string                         { return this.Name }

type ChatCompletionUserMessage struct {
	// The role of the messages author, in this case `user`.
	Role string `json:"role"`
	// The contents of the user message.
	Content ChatCompletionMessageContent `json:"content"`
	// An optional name for the participant. Provides the model information to
	// differentiate between participants of the same role.
	Name *string `json:"name,omitempty"`
}

func (ChatCompletionUserMessage) IsChatCompletionMessage()                      {}
func (this ChatCompletionUserMessage) GetRole() string                          { return this.Role }
func (this ChatCompletionUserMessage) GetContent() ChatCompletionMessageContent { return this.Content }
func (this ChatCompletionUserMessage) GetName() *string                         { return this.Name }

type CreateChatCompletionInput struct {
	// A list of messages comprising the conversation so far.
	// [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
	Messages []*ChatCompletionMessageInput `json:"messages"`
	// ID of the model to use. See the
	// [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)
	// table for details on which models work with the Chat API.
	Model string `json:"model"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their
	// existing frequency in the text so far, decreasing the model's likelihood to
	// repeat the same line verbatim.
	//
	// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
	FrequencyPenalty *float64 `json:"frequencyPenalty,omitempty"`
	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a JSON object that maps tokens (specified by their token ID in the
	// tokenizer) to an associated bias value from -100 to 100. Mathematically, the
	// bias is added to the logits generated by the model prior to sampling. The exact
	// effect will vary per model, but values between -1 and 1 should decrease or
	// increase likelihood of selection; values like -100 or 100 should result in a ban
	// or exclusive selection of the relevant token.
	LogitBias map[string]interface{} `json:"logitBias,omitempty"`
	// Whether to return log probabilities of the output tokens or not. If true,
	// returns the log probabilities of each output token returned in the `content` of
	// `message`.
	LogProbs *bool `json:"logProbs,omitempty"`
	// The maximum number of tokens that can be generated in the chat completion.
	//
	// The total length of input tokens and generated tokens is limited by the model's
	// context length.
	// [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
	// for counting tokens.
	MaxTokens *int `json:"maxTokens,omitempty"`
	// How many chat completion choices to generate for each input message. Note that
	// you will be charged based on the number of generated tokens across all of the
	// choices. Keep `n` as `1` to minimize costs.
	N *int `json:"n,omitempty"`
	// Whether to enable
	// [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)
	// during tool use.
	ParallelToolCalls *bool `json:"parallelToolCalls,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on
	// whether they appear in the text so far, increasing the model's likelihood to
	// talk about new topics.
	//
	// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
	PresencePenalty *float64 `json:"presencePenalty,omitempty"`
	// An object specifying the format that the model must output. Compatible with
	// [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and
	// all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
	//
	// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the
	// message the model generates is valid JSON.
	//
	// **Important:** when using JSON mode, you **must** also instruct the model to
	// produce JSON yourself via a system or user message. Without this, the model may
	// generate an unending stream of whitespace until the generation reaches the token
	// limit, resulting in a long-running and seemingly "stuck" request. Also note that
	// the message content may be partially cut off if `finish_reason="length"`, which
	// indicates the generation exceeded `max_tokens` or the conversation exceeded the
	// max context length.
	ResponseFormat *ResponseFormatInput `json:"responseFormat,omitempty"`
	// This feature is in Beta. If specified, our system will make a best effort to
	// sample deterministically, such that repeated requests with the same `seed` and
	// parameters should return the same result. Determinism is not guaranteed, and you
	// should refer to the `system_fingerprint` response parameter to monitor changes
	// in the backend.
	Seed *int `json:"seed,omitempty"`
	// Specifies the latency tier to use for processing the request. This parameter is
	// relevant for customers subscribed to the scale tier service:
	//
	// - If set to 'auto', the system will utilize scale tier credits until they are
	//   exhausted.
	// - If set to 'default', the request will be processed using the default service
	//   tier with a lower uptime SLA and no latency guarentee.
	// - When not set, the default behavior is 'auto'.
	//
	// When this parameter is set, the response body will include the `service_tier`
	// utilized.
	ServiceTier *CreateChatCompletionServiceTier `json:"serviceTier,omitempty"`
	// Up to 4 sequences where the API will stop generating further tokens.
	Stop []*string `json:"stop,omitempty"`
	// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be
	// sent as data-only
	// [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
	// as they become available, with the stream terminated by a `data: [DONE]`
	// message.
	// [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
	Stream *bool `json:"stream,omitempty"`
	// Options for streaming response. Only set this when you set `stream: true`.
	StreamOptions *CreateChatCompletionStreamOptions `json:"streamOptions,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
	// make the output more random, while lower values like 0.2 will make it more
	// focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float64 `json:"temperature,omitempty"`
	// Controls which (if any) tool is called by the model. `none` means the model will
	// not call any tool and instead generates a message. `auto` means the model can
	// pick between generating a message or calling one or more tools. `required` means
	// the model must call one or more tools. Specifying a particular tool via
	// `{"type": "function", "function": {"name": "my_function"}}` forces the model to
	// call that tool.
	//
	// `none` is the default when no tools are present. `auto` is the default if tools
	// are present.
	ToolChoice *ChatCompletionToolChoiceOption `json:"toolChoice,omitempty"`
	// A list of tools the model may call. Currently, only functions are supported as a
	// tool. Use this to provide a list of functions the model may generate JSON inputs
	// for. A max of 128 functions are supported.
	Tools []*ChatCompletionTool `json:"tools,omitempty"`
	// An integer between 0 and 20 specifying the number of most likely tokens to
	// return at each token position, each with an associated log probability.
	// `logProbs` must be set to `true` if this parameter is used.
	TopLogProbs *int `json:"topLogProbs,omitempty"`
	// An alternative to sampling with temperature, called nucleus sampling, where the
	// model considers the results of the tokens with top_p probability mass. So 0.1
	// means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float64 `json:"topP,omitempty"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor
	// and detect abuse.
	// [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).
	User *string `json:"user,omitempty"`
}

type CreateChatCompletionStreamOptions struct {
	// If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array.
	IncludeUsage *bool `json:"includeUsage,omitempty"`
}

type FunctionCall struct {
	// The name of the function to call.
	Name string `json:"name"`
	// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
	Arguments string `json:"arguments"`
}

type FunctionCallChunk struct {
	// The name of the function to call.
	Name string `json:"name"`
	// The partial arguments to call the function with.
	Arguments string `json:"arguments"`
}

type FunctionCallInput struct {
	// The name of the function to call.
	Name string `json:"name"`
	// The arguments to call the function with, as generated by the model in JSON format.
	Arguments string `json:"arguments"`
}

type JSONSchemaInput struct {
	// A description of what the response format is for, used by the model to determine how to respond in the format.
	Description string `json:"description"`
	// The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`
	// The schema for the response format, described as a JSON Schema object.
	Schema map[string]interface{} `json:"schema"`
	// Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field.
	Strict *bool `json:"strict,omitempty"`
}

type LogProbs struct {
	// A list of message content tokens with log probability information.
	Content []*TokenLogProb `json:"content"`
	// A list of message refusal tokens with log probability information.
	Refusal []*TokenLogProb `json:"refusal"`
}

type Model struct {
	Name string `json:"name"`
}

type ModelConnection struct {
	Edges    []*ModelEdge `json:"edges"`
	PageInfo *PageInfo    `json:"pageInfo"`
}

type ModelEdge struct {
	Node   *Model `json:"node"`
	Cursor string `json:"cursor"`
}

type Mutation struct {
}

type PageInfo struct {
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
}

type Query struct {
}

type ResponseFormatInput struct {
	// The type of response format being defined: `text`, `json_object`, or `json_schema`
	Type string `json:"type"`
	// The schema for the response format, described as a JSON Schema object.
	JSONSchema *JSONSchemaInput `json:"jsonSchema,omitempty"`
}

type Subscription struct {
}

type TokenLogProb struct {
	// The token.
	Token string `json:"token"`
	// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
	LogProb float64 `json:"logProb"`
	// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
	Bytes []int `json:"bytes"`
	// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `topLogProbs` returned.
	TopLogProbs []*TopLogProb `json:"topLogProbs"`
}

type TopLogProb struct {
	// The token.
	Token string `json:"token"`
	// The log probability of this token.
	LogProb float64 `json:"logProb"`
	// A list of integers representing the UTF-8 bytes representation of the token.
	Bytes []int `json:"bytes"`
}

type Usage struct {
	// Number of tokens in the prompt.
	PromptTokens int `json:"promptTokens"`
	// Number of tokens in the generated completion.
	CompletionTokens int `json:"completionTokens"`
	// Total number of tokens used in the request (prompt + completion).
	TotalTokens int `json:"totalTokens"`
}

type ChatCompletionToolChoiceOption string

const (
	ChatCompletionToolChoiceOptionNone     ChatCompletionToolChoiceOption = "none"
	ChatCompletionToolChoiceOptionAuto     ChatCompletionToolChoiceOption = "auto"
	ChatCompletionToolChoiceOptionRequired ChatCompletionToolChoiceOption = "required"
)

var AllChatCompletionToolChoiceOption = []ChatCompletionToolChoiceOption{
	ChatCompletionToolChoiceOptionNone,
	ChatCompletionToolChoiceOptionAuto,
	ChatCompletionToolChoiceOptionRequired,
}

func (e ChatCompletionToolChoiceOption) IsValid() bool {
	switch e {
	case ChatCompletionToolChoiceOptionNone, ChatCompletionToolChoiceOptionAuto, ChatCompletionToolChoiceOptionRequired:
		return true
	}
	return false
}

func (e ChatCompletionToolChoiceOption) String() string {
	return string(e)
}

func (e *ChatCompletionToolChoiceOption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChatCompletionToolChoiceOption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChatCompletionToolChoiceOption", str)
	}
	return nil
}

func (e ChatCompletionToolChoiceOption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CreateChatCompletionServiceTier string

const (
	CreateChatCompletionServiceTierAuto    CreateChatCompletionServiceTier = "auto"
	CreateChatCompletionServiceTierDefault CreateChatCompletionServiceTier = "default"
)

var AllCreateChatCompletionServiceTier = []CreateChatCompletionServiceTier{
	CreateChatCompletionServiceTierAuto,
	CreateChatCompletionServiceTierDefault,
}

func (e CreateChatCompletionServiceTier) IsValid() bool {
	switch e {
	case CreateChatCompletionServiceTierAuto, CreateChatCompletionServiceTierDefault:
		return true
	}
	return false
}

func (e CreateChatCompletionServiceTier) String() string {
	return string(e)
}

func (e *CreateChatCompletionServiceTier) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CreateChatCompletionServiceTier(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CreateChatCompletionServiceTier", str)
	}
	return nil
}

func (e CreateChatCompletionServiceTier) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FinishReason string

const (
	FinishReasonStop          FinishReason = "STOP"
	FinishReasonLength        FinishReason = "LENGTH"
	FinishReasonToolCalls     FinishReason = "TOOL_CALLS"
	FinishReasonContentFilter FinishReason = "CONTENT_FILTER"
	FinishReasonFunctionCall  FinishReason = "FUNCTION_CALL"
)

var AllFinishReason = []FinishReason{
	FinishReasonStop,
	FinishReasonLength,
	FinishReasonToolCalls,
	FinishReasonContentFilter,
	FinishReasonFunctionCall,
}

func (e FinishReason) IsValid() bool {
	switch e {
	case FinishReasonStop, FinishReasonLength, FinishReasonToolCalls, FinishReasonContentFilter, FinishReasonFunctionCall:
		return true
	}
	return false
}

func (e FinishReason) String() string {
	return string(e)
}

func (e *FinishReason) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FinishReason(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FinishReason", str)
	}
	return nil
}

func (e FinishReason) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageDetail string

const (
	ImageDetailAuto ImageDetail = "auto"
	ImageDetailLow  ImageDetail = "low"
	ImageDetailHigh ImageDetail = "high"
)

var AllImageDetail = []ImageDetail{
	ImageDetailAuto,
	ImageDetailLow,
	ImageDetailHigh,
}

func (e ImageDetail) IsValid() bool {
	switch e {
	case ImageDetailAuto, ImageDetailLow, ImageDetailHigh:
		return true
	}
	return false
}

func (e ImageDetail) String() string {
	return string(e)
}

func (e *ImageDetail) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageDetail(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageDetail", str)
	}
	return nil
}

func (e ImageDetail) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceTier string

const (
	// the system will utilize scale tier credits until they are exhausted.
	ServiceTierAuto ServiceTier = "AUTO"
	// the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.
	ServiceTierDefault ServiceTier = "DEFAULT"
)

var AllServiceTier = []ServiceTier{
	ServiceTierAuto,
	ServiceTierDefault,
}

func (e ServiceTier) IsValid() bool {
	switch e {
	case ServiceTierAuto, ServiceTierDefault:
		return true
	}
	return false
}

func (e ServiceTier) String() string {
	return string(e)
}

func (e *ServiceTier) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceTier(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceTier", str)
	}
	return nil
}

func (e ServiceTier) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
