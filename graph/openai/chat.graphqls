scalar Map

type ChatCompletionResult {
  """
  A unique identifier for the chat completion.
  """
  id: ID!
  """
  The object type, which is always "chat.completion".
  """
  object: String!
  """
  The Unix timestamp (in seconds) of when the chat completion was created.
  """
  created: Int!
  """
  The model used for the chat completion.
  """
  model: String!
  """
  A list of chat completion choices. Can be more than one if n is greater than 1.
  """
  choices: [ChatCompletionChoice!]!
  """
  Usage statistics for the completion request.
  """
  usage: Usage!
  """
  This fingerprint represents the backend configuration that the model runs with.
  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
  """
  systemFingerprint: String
}

type ChatCompletionChoice {
  """
  The index of the choice in the list of choices.
  """
  index: Int!
  """
  The chat completion message generated by the model.
  """
  message: ChatCompletionMessage!
  """
  The reason the model stopped generating tokens. This will be "stop" if the model hit a natural stop point or a provided stop sequence,
  - "length" if the maximum number of tokens specified in the request was reached,
  - "content_filter" if content was omitted due to a flag from our content filters,
  - "tool_calls" if the model called a tool, or "function_call" (deprecated) if the model called a function.
  """
  finishReason: FinishReason
  """
  Log probability information for the choice.
  """
  logprobs: LogProbs
}

union ChatCompletionMessageContent = ChatCompletionTextContent | ChatCompletionArrayContent

type ChatCompletionTextContent {
  text: String!
}

"""
The contents of a chat completion message part
"""
union ChatCompletionMessageContentPart = ChatCompletionContentPartText | ChatCompletionContentPartImage

"""
Text content part of a chat completion message
"""
type ChatCompletionContentPartText {
  """
  The text content.
  """
  text: String!

  """
  The type of the content part.
  """
  type: String!
}

"""
Image content part of a chat completion message
"""
type ChatCompletionContentPartImage {
  """
  The image URL information.
  """
  imageUrl: ChatCompletionContentPartImageURL!

  """
  The type of the content part.
  """
  type: String!
}

"""
Image URL information for an image content part
"""
type ChatCompletionContentPartImageURL {
  """
  Either a URL of the image or the base64 encoded image data.
  """
  url: String!

  """
  Specifies the detail level of the image. Learn more in the
  [Vision guide](https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding).
  """
  detail: ImageDetail
}

enum ImageDetail {
  auto
  low
  high
}

type ChatCompletionArrayContent {
  parts: [ChatCompletionMessageContentPart!]!
}

interface ChatCompletionMessage {
  role: String!
  content: ChatCompletionMessageContent
  name: String
}

type ChatCompletionSystemMessage implements ChatCompletionMessage {
  """
  The role of the messages author, in this case `system`.
  """
  role: String!
  """
  The contents of the system message.
  """
  content: ChatCompletionMessageContent!
  """
  An optional name for the participant. Provides the model information to
  differentiate between participants of the same role.
  """
  name: String
}

type ChatCompletionUserMessage implements ChatCompletionMessage {
  """
  The role of the messages author, in this case `user`.
  """
  role: String!
  """
  The contents of the user message.
  """
  content: ChatCompletionMessageContent!
  """
  An optional name for the participant. Provides the model information to
  differentiate between participants of the same role.
  """
  name: String
}

type ChatCompletionAssistantMessage implements ChatCompletionMessage {
  """
  The role of the messages author, in this case `assistant`.
  """
  role: String!
  """
  The contents of the assistant message. Required unless `toolCalls` is specified.
  """
  content: ChatCompletionMessageContent
  """
  An optional name for the participant. Provides the model information to
  differentiate between participants of the same role.
  """
  name: String
  """
  The tool calls generated by the model, such as function calls.
  """
  toolCalls: [ChatCompletionMessageToolCall!]
  """
  The ID of the tool call that this message is responding to.
  """
  toolCallId: String
}

type ChatCompletionToolMessage implements ChatCompletionMessage {
  """
  The role of the messages author, in this case `tool`.
  """
  role: String!
  """
  The contents of the tool message.
  """
  content: ChatCompletionMessageContent!
  """
  An optional name for the participant. Provides the model information to
  differentiate between participants of the same role.
  """
  name: String
  """
  Tool call that this message is responding to.
  """
  toolCallId: String!
}

type ChatCompletionMessageToolCall {
  """
  The ID of the tool call.
  """
  id: String!

  """
  The function that the model called.
  """
  function: FunctionCall!

  """
  The type of the tool. Currently, only `function` is supported.
  """
  type: String!
}

type FunctionCall {
  """
  The name of the function to call.
  """
  name: String!
  """
  The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
  """
  arguments: String!
}

type Usage {
  """
  Number of tokens in the prompt.
  """
  promptTokens: Int!
  """
  Number of tokens in the generated completion.
  """
  completionTokens: Int!
  """
  Total number of tokens used in the request (prompt + completion).
  """
  totalTokens: Int!
}

type LogProbs {
  """
  A list of message content tokens with log probability information.
  """
  content: [TokenLogProb!]!
  """
  A list of message refusal tokens with log probability information.
  """
  refusal: [TokenLogProb!]!
}

type TokenLogProb {
  """
  The token.
  """
  token: String!
  """
  The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
  """
  logProb: Float!
  """
  A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
  """
  bytes: [Int!]!
  """
  List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
  """
  topLogProbs: [TopLogProb!]!
}

type TopLogProb {
  """
  The token.
  """
  token: String!
  """
  The log probability of this token.
  """
  logProb: Float!
  """
  A list of integers representing the UTF-8 bytes representation of the token.
  """
  bytes: [Int!]!
}

enum FinishReason {
  STOP
  LENGTH
  TOOL_CALLS
  CONTENT_FILTER
  FUNCTION_CALL
}

enum ServiceTier {
  """
  the system will utilize scale tier credits until they are exhausted.
  """
  AUTO
  """
  the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.
  """
  DEFAULT
}

input CreateChatCompletionInput {
  """
  A list of messages comprising the conversation so far.
  [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
  """
  messages: [ChatCompletionMessageInput!]!
  """
  ID of the model to use. See the
  [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)
  table for details on which models work with the Chat API.
  """
  model: String!
  """
  Number between -2.0 and 2.0. Positive values penalize new tokens based on their
  existing frequency in the text so far, decreasing the model's likelihood to
  repeat the same line verbatim.

  [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
  """
  frequencyPenalty: Float
  """
  Modify the likelihood of specified tokens appearing in the completion.

  Accepts a JSON object that maps tokens (specified by their token ID in the
  tokenizer) to an associated bias value from -100 to 100. Mathematically, the
  bias is added to the logits generated by the model prior to sampling. The exact
  effect will vary per model, but values between -1 and 1 should decrease or
  increase likelihood of selection; values like -100 or 100 should result in a ban
  or exclusive selection of the relevant token.
  """
  logitBias: Map
  """
  Whether to return log probabilities of the output tokens or not. If true,
  returns the log probabilities of each output token returned in the `content` of
  `message`.
  """
  logProbs: Boolean
  """
  The maximum number of tokens that can be generated in the chat completion.

  The total length of input tokens and generated tokens is limited by the model's
  context length.
  [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
  for counting tokens.
  """
  maxTokens: Int
  """
  How many chat completion choices to generate for each input message. Note that
  you will be charged based on the number of generated tokens across all of the
  choices. Keep `n` as `1` to minimize costs.
  """
  n: Int
  """
  Whether to enable
  [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)
  during tool use.
  """
  parallelToolCalls: Boolean
  """
  Number between -2.0 and 2.0. Positive values penalize new tokens based on
  whether they appear in the text so far, increasing the model's likelihood to
  talk about new topics.

  [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
  """
  presencePenalty: Float
  """
  An object specifying the format that the model must output. Compatible with
  [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and
  all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.

  Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the
  message the model generates is valid JSON.

  **Important:** when using JSON mode, you **must** also instruct the model to
  produce JSON yourself via a system or user message. Without this, the model may
  generate an unending stream of whitespace until the generation reaches the token
  limit, resulting in a long-running and seemingly "stuck" request. Also note that
  the message content may be partially cut off if `finish_reason="length"`, which
  indicates the generation exceeded `max_tokens` or the conversation exceeded the
  max context length.
  """
  responseFormat: ResponseFormatInput
  """
  This feature is in Beta. If specified, our system will make a best effort to
  sample deterministically, such that repeated requests with the same `seed` and
  parameters should return the same result. Determinism is not guaranteed, and you
  should refer to the `system_fingerprint` response parameter to monitor changes
  in the backend.
  """
  seed: Int
  """
  Specifies the latency tier to use for processing the request. This parameter is
  relevant for customers subscribed to the scale tier service:

  - If set to 'auto', the system will utilize scale tier credits until they are
    exhausted.
  - If set to 'default', the request will be processed using the default service
    tier with a lower uptime SLA and no latency guarentee.
  - When not set, the default behavior is 'auto'.

  When this parameter is set, the response body will include the `service_tier`
  utilized.
  """
  serviceTier: CreateChatCompletionServiceTier
  """
  Up to 4 sequences where the API will stop generating further tokens.
  """
  stop: [String]
  """
  If set, partial message deltas will be sent, like in ChatGPT. Tokens will be
  sent as data-only
  [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
  as they become available, with the stream terminated by a `data: [DONE]`
  message.
  [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
  """
  stream: Boolean
  """
  Options for streaming response. Only set this when you set `stream: true`.
  """
  streamOptions: CreateChatCompletionStreamOptions
  """
  What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
  make the output more random, while lower values like 0.2 will make it more
  focused and deterministic.

  We generally recommend altering this or `top_p` but not both.
  """
  temperature: Float
  """
  Controls which (if any) tool is called by the model. `none` means the model will
  not call any tool and instead generates a message. `auto` means the model can
  pick between generating a message or calling one or more tools. `required` means
  the model must call one or more tools. Specifying a particular tool via
  `{"type": "function", "function": {"name": "my_function"}}` forces the model to
  call that tool.

  `none` is the default when no tools are present. `auto` is the default if tools
  are present.
  """
  toolChoice: ChatCompletionToolChoiceOption
  """
  A list of tools the model may call. Currently, only functions are supported as a
  tool. Use this to provide a list of functions the model may generate JSON inputs
  for. A max of 128 functions are supported.
  """
  tools: [ChatCompletionTool]
  """
  An integer between 0 and 20 specifying the number of most likely tokens to
  return at each token position, each with an associated log probability.
  `logprobs` must be set to `true` if this parameter is used.
  """
  topLogProbs: Int
  """
  An alternative to sampling with temperature, called nucleus sampling, where the
  model considers the results of the tokens with top_p probability mass. So 0.1
  means only the tokens comprising the top 10% probability mass are considered.

  We generally recommend altering this or `temperature` but not both.
  """
  topP: Float
  """
  A unique identifier representing your end-user, which can help OpenAI to monitor
  and detect abuse.
  [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).
  """
  user: String
}

input ChatCompletionMessageInput {
  role: String!
  content: String
  multiContent: [ChatCompletionMessageContentPartInput!]
  name: String
  functionCall: FunctionCallInput
  toolCalls: [ChatCompletionMessageToolCallInput!]
  toolCallId: String
}

input ChatCompletionMessageContentPartInput {
  type: String!
  text: String
  imageUrl: ChatCompletionContentPartImageURLInput
}

input ChatCompletionContentPartImageURLInput {
  url: String!
  detail: ImageDetail
}

input FunctionCallInput {
  """
  The name of the function to call.
  """
  name: String!
  """
  The arguments to call the function with, as generated by the model in JSON format.
  """
  arguments: String!
}

input ChatCompletionMessageToolCallInput {
  """
  The ID of the tool call.
  """
  id: String!
  """
  The function that the model called.
  """
  function: FunctionCallInput!
  """
  The type of the tool. Currently, only `function` is supported.
  """
  type: String!
}

input ResponseFormatInput {
  """
  The type of response format being defined: `text`, `json_object`, or `json_schema`
  """
  type: String!
  """
  The schema for the response format, described as a JSON Schema object.
  """
  jsonSchema: JSONSchemaInput
}

input JSONSchemaInput {
  """
  A description of what the response format is for, used by the model to determine how to respond in the format.
  """
  description: String!
  """
  The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
  """
  name: String!
  """
  The schema for the response format, described as a JSON Schema object.
  """
  schema: Map!
  """
  Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field.
  """
  strict: Boolean
}

input CreateChatCompletionStreamOptions {
  """
  If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array.
  """
  includeUsage: Boolean
}

enum ChatCompletionToolChoiceOption {
  none
  auto
  required
}

input ChatCompletionTool {
  """
  Function definitions for the tool.
  """
  function: ChatCompletionToolFunction
  """
  The type of the tool. Currently, only `function` is supported.
  """
  type: String!
}

input ChatCompletionToolFunction {
  """
  The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
  underscores and dashes, with a maximum length of 64.
  """
  name: String!
  """
  A description of what the function does, used by the model to choose when and
  how to call the function.
  """
  description: String!
  """
  Whether to enable strict schema adherence when generating the output. If set to
  true, the model will always follow the exact schema defined in the `parameters` field.
  """
  strict: Boolean
  """
  The parameters the functions accepts, described as a JSON Schema object. See the
  [guide](https://platform.openai.com/docs/guides/function-calling) for examples,
  and the
  [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
  documentation about the format.

  Omitting `parameters` defines a function with an empty parameter list.
  """
  parameters: Map
}

enum CreateChatCompletionServiceTier {
  auto
  default
}

type ChatCompletionStreamResult {
  """
  A unique identifier for the chat completion. Each chunk has the same ID.
  """
  id: ID!
  """
  The object type, which is always "chat.completion.chunk".
  """
  object: String!
  """
  The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
  """
  created: Int!
  """
  The model to generate the completion.
  """
  model: String!
  """
  A list of chat completion choices. Can contain more than one element if n is greater than 1.
  """
  choices: [ChatCompletionStreamChunkChoice!]!
  """
  This fingerprint represents the backend configuration that the model runs with.
  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
  """
  systemFingerprint: String
  """
  Usage statistics for the completion request.
  """
  usage: Usage
}

type ChatCompletionStreamChunkChoice {
  """
  The index of the choice in the list of choices.
  """
  index: Int!
  """
  The partial message delta.
  """
  delta: ChatCompletionStreamResponseDelta!
  """
  The reason the model stopped generating tokens.
  """
  finishReason: FinishReason
}

type ChatCompletionStreamResponseDelta {
  """
  The role of the author of this message.
  """
  role: String!
  """
  The partial content of the message.
  """
  content: String
  """
  The partial tool calls generated by the model.
  """
  toolCalls: [ChatCompletionMessageToolCallChunk!]
  """
  Deprecated. The partial function call information.
  """
  functionCall: FunctionCall
}

type ChatCompletionMessageToolCallChunk {
  """
  The index of the tool call in the list of tool calls.
  """
  index: Int
  """
  The ID of the tool call.
  """
  id: String!
  """
  The type of the tool. Currently, only "function" is supported.
  """
  type: String!
  """
  The partial function call information.
  """
  function: FunctionCallChunk
}

type FunctionCallChunk {
  """
  The name of the function to call.
  """
  name: String!
  """
  The partial arguments to call the function with.
  """
  arguments: String!
}

type Model {
  name: String!
}

type ModelEdge {
  node: Model!
  cursor: String!
}

type ModelConnection {
  edges: [ModelEdge!]!
  pageInfo: PageInfo!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Query {
  models(first: Int, after: String, last: Int, before: String): ModelConnection!
}

type Mutation {
  """
  Creates a model response for the given chat conversation.
  """
  createChatCompletion(input: CreateChatCompletionInput!): ChatCompletionResult!
}

type Subscription {
  """
  Creates a streaming model response for the given chat conversation.
  """
  createChatCompletionStream(input: CreateChatCompletionInput!): ChatCompletionStreamResult!
}
