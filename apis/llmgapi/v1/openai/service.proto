syntax = "proto3";

package apis.llmgapi.v1.openai;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/lingticio/llmg/apis/llmgapi/v1/openai";

enum ChatCompletionServiceTier {
  ChatCompletionServiceTierUnspecified = 0;
  ChatCompletionServiceTierScale = 1;
  ChatCompletionServiceTierDefault = 2;
}

// CreateChatCompletionRequest represents the parameters for creating a chat completion.
message CreateChatCompletionRequest {
  // A list of messages comprising the conversation so far.
  repeated ChatCompletionMessage messages = 1;

  // ID of the model to use. See the [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)
  // table for details on which models work with the Chat API.
  string model = 2;

  // Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,
  // decreasing the model's likelihood to repeat the same line verbatim.
  optional float frequency_penalty = 3;

  // Modify the likelihood of specified tokens appearing in the completion.
  //
  // Accepts a JSON object that maps tokens (specified by their token ID in the
  // tokenizer) to an associated bias value from -100 to 100. Mathematically, the
  // bias is added to the logits generated by the model prior to sampling. The exact
  // effect will vary per model, but values between -1 and 1 should decrease or
  // increase likelihood of selection; values like -100 or 100 should result in a ban
  // or exclusive selection of the relevant token.
  map<string, int64> logit_bias = 4;

  // Whether to return log probabilities of the output tokens or not. If true,
  // returns the log probabilities of each output token returned in the `content` of
  // `message`.
  optional bool log_probs = 5;

  // An integer between 0 and 20 specifying the number of most likely tokens to
  // return at each token position, each with an associated log probability.
  // `logprobs` must be set to `true` if this parameter is used.
  optional int64 top_log_probs = 6;

  // The maximum number of tokens that can be generated in the chat completion.
  //
  // The total length of input tokens and generated tokens is limited by the model's
  // context length.
  // [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
  // for counting tokens.
  optional int64 max_tokens = 7;

  // How many chat completion choices to generate for each input message. Note that
  // you will be charged based on the number of generated tokens across all of the
  // choices. Keep `n` as `1` to minimize costs.
  optional int64 n = 8;

  // Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)
  // during tool use.
  optional bool parallel_tool_calls = 9;

  // Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
  // whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
  //
  // [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
  optional float presence_penalty = 10;

  // An object specifying the format that the model must output. Compatible with
  // [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and
  // all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
  //
  // Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the
  // message the model generates is valid JSON.
  //
  // **Important:** when using JSON mode, you **must** also instruct the model to
  // produce JSON yourself via a system or user message. Without this, the model may
  // generate an unending stream of whitespace until the generation reaches the token
  // limit, resulting in a long-running and seemingly "stuck" request. Also note that
  // the message content may be partially cut off if `finish_reason="length"`, which
  // indicates the generation exceeded `max_tokens` or the conversation exceeded the
  // max context length.
  optional ChatCompletionResponseFormat response_format = 11;

  // This feature is in Beta. If specified, our system will make a best effort to
  // sample deterministically, such that repeated requests with the same `seed` and
  // parameters should return the same result. Determinism is not guaranteed, and you
  // should refer to the `system_fingerprint` response parameter to monitor changes
  // in the backend.
  optional int64 seed = 12;

  // Specifies the latency tier to use for processing the request. This parameter is
  // relevant for customers subscribed to the scale tier service:
  //
  // - If set to 'auto', the system will utilize scale tier credits until they are
  //   exhausted.
  // - If set to 'default', the request will be processed using the default service
  //   tier with a lower uptime SLA and no latency guarentee.
  // - When not set, the default behavior is 'auto'.
  //
  // When this parameter is set, the response body will include the `service_tier`
  // utilized.
  optional ChatCompletionServiceTier service_tier = 13;

  // Up to 4 sequences where the API will stop generating further tokens.
  optional string stop = 14;
  repeated string stop_array = 15;

  // What sampling temperature to use, between 0 and 2.
  optional float temperature = 16;

  // Controls which (if any) tool is called by the model. `none` means the model will
  // not call any tool and instead generates a message. `auto` means the model can
  // pick between generating a message or calling one or more tools. `required` means
  // the model must call one or more tools. Specifying a particular tool via
  // `{"type": "function", "function": {"name": "my_function"}}` forces the model to
  // call that tool.
  //
  // `none` is the default when no tools are present. `auto` is the default if tools
  // are present.
  optional ChatCompletionToolChoiceOption tool_choice = 17;

  // A list of tools the model may call. Currently, only functions are supported as a
  // tool. Use this to provide a list of functions the model may generate JSON inputs
  // for. A max of 128 functions are supported.
  repeated ChatCompletionTool tools = 18;

  // An alternative to sampling with temperature, called nucleus sampling, where the
  // model considers the results of the tokens with top_p probability mass. So 0.1
  // means only the tokens comprising the top 10% probability mass are considered.
  //
  // We generally recommend altering this or `temperature` but not both.
  optional float top_p = 19;

  // A unique identifier representing your end-user, which can help OpenAI to monitor
  // and detect abuse.
  // [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).
  optional string user = 20;
}

// CreateChatCompletionRequest represents the parameters for creating a chat completion.
message CreateChatCompletionStreamRequest {
  // A list of messages comprising the conversation so far.
  repeated ChatCompletionMessage messages = 1;

  // ID of the model to use. See the [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)
  // table for details on which models work with the Chat API.
  string model = 2;

  // Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,
  // decreasing the model's likelihood to repeat the same line verbatim.
  optional float frequency_penalty = 3;

  // Modify the likelihood of specified tokens appearing in the completion.
  //
  // Accepts a JSON object that maps tokens (specified by their token ID in the
  // tokenizer) to an associated bias value from -100 to 100. Mathematically, the
  // bias is added to the logits generated by the model prior to sampling. The exact
  // effect will vary per model, but values between -1 and 1 should decrease or
  // increase likelihood of selection; values like -100 or 100 should result in a ban
  // or exclusive selection of the relevant token.
  map<string, int64> logit_bias = 4;

  // Whether to return log probabilities of the output tokens or not. If true,
  // returns the log probabilities of each output token returned in the `content` of
  // `message`.
  optional bool log_probs = 5;

  // An integer between 0 and 20 specifying the number of most likely tokens to
  // return at each token position, each with an associated log probability.
  // `logprobs` must be set to `true` if this parameter is used.
  optional int64 top_log_probs = 6;

  // The maximum number of tokens that can be generated in the chat completion.
  //
  // The total length of input tokens and generated tokens is limited by the model's
  // context length.
  // [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
  // for counting tokens.
  optional int64 max_tokens = 7;

  // How many chat completion choices to generate for each input message. Note that
  // you will be charged based on the number of generated tokens across all of the
  // choices. Keep `n` as `1` to minimize costs.
  optional int64 n = 8;

  // Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling/parallel-function-calling)
  // during tool use.
  optional bool parallel_tool_calls = 9;

  // Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
  // whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
  //
  // [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
  optional float presence_penalty = 10;

  // An object specifying the format that the model must output. Compatible with
  // [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and
  // all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
  //
  // Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the
  // message the model generates is valid JSON.
  //
  // **Important:** when using JSON mode, you **must** also instruct the model to
  // produce JSON yourself via a system or user message. Without this, the model may
  // generate an unending stream of whitespace until the generation reaches the token
  // limit, resulting in a long-running and seemingly "stuck" request. Also note that
  // the message content may be partially cut off if `finish_reason="length"`, which
  // indicates the generation exceeded `max_tokens` or the conversation exceeded the
  // max context length.
  optional ChatCompletionResponseFormat response_format = 11;

  // This feature is in Beta. If specified, our system will make a best effort to
  // sample deterministically, such that repeated requests with the same `seed` and
  // parameters should return the same result. Determinism is not guaranteed, and you
  // should refer to the `system_fingerprint` response parameter to monitor changes
  // in the backend.
  optional int64 seed = 12;

  // Specifies the latency tier to use for processing the request. This parameter is
  // relevant for customers subscribed to the scale tier service:
  //
  // - If set to 'auto', the system will utilize scale tier credits until they are
  //   exhausted.
  // - If set to 'default', the request will be processed using the default service
  //   tier with a lower uptime SLA and no latency guarentee.
  // - When not set, the default behavior is 'auto'.
  //
  // When this parameter is set, the response body will include the `service_tier`
  // utilized.
  optional ChatCompletionServiceTier service_tier = 13;

  // Up to 4 sequences where the API will stop generating further tokens.
  optional string stop = 14;
  repeated string stop_array = 15;

  // Options for streaming response. Only set this when you call CreateChatCompletionStream.
  optional ChatCompletionStreamOptions stream_options = 16;

  // What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
  // make the output more random, while lower values like 0.2 will make it more
  // focused and deterministic.
  //
  // We generally recommend altering this or `top_p` but not both.
  optional float temperature = 17;

  // Controls which (if any) tool is called by the model. `none` means the model will
  // not call any tool and instead generates a message. `auto` means the model can
  // pick between generating a message or calling one or more tools. `required` means
  // the model must call one or more tools. Specifying a particular tool via
  // `{"type": "function", "function": {"name": "my_function"}}` forces the model to
  // call that tool.
  //
  // `none` is the default when no tools are present. `auto` is the default if tools
  // are present.
  optional ChatCompletionToolChoiceOption tool_choice = 18;

  // A list of tools the model may call. Currently, only functions are supported as a
  // tool. Use this to provide a list of functions the model may generate JSON inputs
  // for. A max of 128 functions are supported.
  repeated ChatCompletionTool tools = 19;

  // An alternative to sampling with temperature, called nucleus sampling, where the
  // model considers the results of the tokens with top_p probability mass. So 0.1
  // means only the tokens comprising the top 10% probability mass are considered.
  //
  // We generally recommend altering this or `temperature` but not both.
  optional float top_p = 20;

  // A unique identifier representing your end-user, which can help OpenAI to monitor
  // and detect abuse.
  // [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).
  optional string user = 21;
}

message ChatCompletionStreamOptions {
  // If set, an additional chunk will be streamed before the `data: [DONE]` message.
  // The `usage` field on this chunk shows the token usage statistics for the entire
  // request, and the `choices` field will always be an empty array. All other chunks
  // will also include a `usage` field, but with a null value.
  optional bool include_usage = 1;
}

// ChatCompletion represents a chat completion response returned by the model.
message CreateChatCompletionResponse {
  // A unique identifier for the chat completion.
  string id = 1;

  // A list of chat completion choices. Can be more than one if n is greater than 1.
  repeated ChatCompletionChoice choices = 2;

  // The Unix timestamp (in seconds) of when the chat completion was created.
  google.protobuf.Timestamp created = 3;

  // The model used for the chat completion.
  string model = 4;

  // The object type, which is always "chat.completion".
  string object = 5;

  // The service tier used for processing the request.
  optional ChatCompletionServiceTier service_tier = 6;

  // This fingerprint represents the backend configuration that the model runs with.
  optional string system_fingerprint = 7;

  // ChatCompletionUsage statistics for the completion request.
  optional ChatCompletionUsage usage = 8;
}

enum ChatCompletionFinishReason {
  ChatCompletionFinishReasonUnspecified = 0;
  ChatCompletionFinishReasonStop = 1;
  ChatCompletionFinishReasonLength = 2;
  ChatCompletionFinishReasonToolCalls = 3;
  ChatCompletionFinishReasonContentFilter = 4;
  ChatCompletionFinishReasonFunctionCall = 5;
  ChatCompletionFinishReasonNull = 6;
}

// ChatCompletionChoice represents a single completion choice in the chat completion response.
message ChatCompletionChoice {
  // The reason the model stopped generating tokens. This will be `stop` if the model
  // hit a natural stop point or a provided stop sequence, `length` if the maximum
  // number of tokens specified in the request was reached, `content_filter` if
  // content was omitted due to a flag from our content filters, `tool_calls` if the
  // model called a tool, or `function_call` (deprecated) if the model called a
  // function.
  ChatCompletionFinishReason finish_reason = 1;

  // The index of the choice in the list of choices.
  int64 index = 2;

  // Log probability information for the choice.
  optional ChatCompletionChoiceLogProbs log_probs = 3;

  // A chat completion message generated by the model.
  ChatCompletionMessage message = 4;
}

// ChatCompletionChoiceLogprobs contains log probability information for a completion choice.
message ChatCompletionChoiceLogProbs {
  // A list of message content tokens with log probability information.
  repeated ChatCompletionTokenLogProb content = 1;
}

enum ChatCompletionMessageToolCallType {
  ChatCompletionMessageToolCallTypeUnspecified = 0;
  ChatCompletionMessageToolCallTypeFunction = 1;
}

// ChatCompletionMessageToolCall represents a tool call made by the model.
message ChatCompletionMessageToolCall {
  // The ID of the tool call.
  string id = 1;

  // The type of the tool. Currently, only "function" is supported.
  ChatCompletionMessageToolCallType type = 2;

  // The function that the model called.
  ChatCompletionMessageToolCallFunction function = 3;
}

// ChatCompletionChunkToolCall represents a tool call made by the model.
message ChatCompletionChunkDeltaToolCall {
  int64 index = 1;

  // The ID of the tool call.
  optional string id = 2;

  // The function that the model called.
  optional ChatCompletionMessageToolCallFunction function = 3;

  // The type of the tool. Currently, only "function" is supported.
  optional ChatCompletionMessageToolCallType type = 4;
}

// ChatCompletionMessageToolCallFunction represents the details of a function call made by the model.
message ChatCompletionMessageToolCallFunction {
  // The name of the function to call.
  string name = 1;

  // The arguments to call the function with, as generated by the model in JSON format.
  string arguments = 2;
}

// ChatCompletionChunk represents a streamed chunk of a chat completion response.
message CreateChatCompletionStreamResponse {
  // A unique identifier for the chat completion. Each chunk has the same ID.
  string id = 1;

  // A list of chat completion choices. Can contain more than one element if n is greater than 1.
  repeated ChatCompletionChunkChoice choices = 2;

  // The Unix timestamp (in seconds) of when the chat completion chunk was created.
  google.protobuf.Timestamp created = 3;

  // The model used to generate the completion.
  string model = 4;

  // The object type, which is always "chat.completion.chunk".
  string object = 5;

  // The service tier used for processing the request.
  optional ChatCompletionServiceTier service_tier = 6;

  // This fingerprint represents the backend configuration that the model runs with.
  optional string system_fingerprint = 7;

  // Token usage statistics for the entire request. Only present in the final chunk.
  optional ChatCompletionUsage usage = 8;
}

// ChatCompletionChunkChoice represents a single completion choice in a streamed chat completion chunk.
message ChatCompletionChunkChoice {
  // The content delta for this chunk.
  ChatCompletionChunkChoiceDelta delta = 1;

  // The reason the model stopped generating tokens. This will be `stop` if the model
  // hit a natural stop point or a provided stop sequence, `length` if the maximum
  // number of tokens specified in the request was reached, `content_filter` if
  // content was omitted due to a flag from our content filters, `tool_calls` if the
  // model called a tool, or `function_call` (deprecated) if the model called a
  // function.
  optional ChatCompletionFinishReason finish_reason = 2;

  // The index of the choice in the list of choices.
  int64 index = 3;

  // Log probability information for the choice.
  optional ChatCompletionChoiceLogProbs logprobs = 4;
}

// ChatCompletionChunkChoiceDelta represents the content delta in a stream response.
message ChatCompletionChunkChoiceDelta {
  // The content delta.
  optional string content = 1;

  // Role of the message author (if changed).
  optional string role = 2;

  // Tool calls in this delta.
  repeated ChatCompletionChunkDeltaToolCall tool_calls = 3;
}

// ChatCompletionTokenLogprob contains log probability information for a single token.
message ChatCompletionTokenLogProb {
  // The token string.
  string token = 1;

  // A list of integers representing the UTF-8 bytes representation of the token.
  // Useful in instances where characters are represented by multiple tokens and
  // their byte representations must be combined to generate the correct text
  // representation. Can be `null` if there is no bytes representation for the token.
  bytes bytes = 2;

  // The log probability of this token, if it is within the top 20 most likely
  // tokens. Otherwise, the value `-9999.0` is used to signify that the token is very
  // unlikely.
  double log_prob = 3;

  // List of the most likely tokens and their log probability, at this token
  // position. In rare cases, there may be fewer than the number of requested
  // `top_logprobs` returned.
  repeated ChatCompletionTokenLogprobTopLogProb top_log_probs = 4;
}

// ChatCompletionTokenLogprobTopLogProb represents a top alternative token and its log probability.
message ChatCompletionTokenLogprobTopLogProb {
  // The token string.
  string token = 1;

  // A list of integers representing the UTF-8 bytes representation of the token.
  // Useful in instances where characters are represented by multiple tokens and
  // their byte representations must be combined to generate the correct text
  // representation. Can be `null` if there is no bytes representation for the token.
  bytes bytes = 2;

  // The log probability of this token, if it is within the top 20 most likely
  // tokens. Otherwise, the value `-9999.0` is used to signify that the token is very
  // unlikely.
  double log_prob = 3;
}

// ChatCompletionMessage represents a message in the chat conversation.
message ChatCompletionMessage {
  oneof message {
    ChatCompletionSystemMessage system_message = 1;
    ChatCompletionUserMessage user_message = 2;
    ChatCompletionAssistantMessage assistant_message = 3;
    ChatCompletionToolMessage tool_message = 4;
  }
}

// ChatCompletionSystemMessage represents a system message in the chat conversation.
message ChatCompletionSystemMessage {
  // The contents of the system message.
  string content = 1;

  // The role of the messages author, in this case "system".
  string role = 2;

  // An optional name for the participant. Provides the model information to
  // differentiate between participants of the same role.
  optional string name = 3;
}

message ChatCompletionMessageTextContent {
  // The text content.
  string content = 1;
}

message ChatCompletionMessageMultiContent {
  // An array of content parts with a defined type.
  repeated ChatCompletionMessageContentPart parts = 1;
}

message ChatCompletionUserMessageContent {
  oneof content {
    ChatCompletionMessageTextContent text = 1;
    ChatCompletionMessageMultiContent multi = 2;
  }
}

// ChatCompletionUserMessage represents a user message in the chat conversation.
message ChatCompletionUserMessage {
  // The contents of the user message.
  ChatCompletionUserMessageContent content = 1;

  // The role of the messages author, in this case "user".
  string role = 3;

  // An optional name for the participant. Provides the model information to
  // differentiate between participants of the same role.
  optional string name = 4;
}

// ChatCompletionAssistantMessage represents an assistant message in the chat conversation.
message ChatCompletionAssistantMessage {
  // The role of the messages author, in this case "assistant".
  string role = 1;

  // The contents of the assistant message.
  optional string content = 2;

  // An optional name for the participant. Provides the model information to
  // differentiate between participants of the same role.
  optional string name = 3;

  // The tool calls generated by the model, such as function calls.
  repeated ChatCompletionMessageToolCall tool_calls = 4;
}

// ChatCompletionToolMessage represents a tool message in the chat conversation.
message ChatCompletionToolMessage {
  // The contents of the tool message.
  string content = 1;

  // The role of the messages author, in this case "tool".
  string role = 2;

  // Tool call that this message is responding to.
  string tool_call_id = 3;
}

// ChatCompletionMessageContentPart represents a part of the message content (text or image).
message ChatCompletionMessageContentPart {
  oneof type {
    ChatCompletionMessageContentPartText text = 1;
    ChatCompletionMessageContentPartImage image = 2;
  }
}

// ChatCompletionMessageContentPartText represents a text content part.
message ChatCompletionMessageContentPartText {
  // The text content.
  string text = 1;
}

enum ChatCompletionMessageContentPartImageType {
  ChatCompletionMessageContentPartImageTypeUnspecified = 0;
  ChatCompletionMessageContentPartImageTypeURL = 1;
}

// ChatCompletionMessageContentPartImage represents an image content part.
message ChatCompletionMessageContentPartImage {
  ChatCompletionMessageContentPartImageType type = 1;
  // The image URL and optional detail level.
  ChatCompletionMessageContentPartImageURL image_url = 2;
}

enum ChatCompletionMessageContentPartImageDetail {
  ChatCompletionMessageContentPartImageDetailUnspecified = 0;
  ChatCompletionMessageContentPartImageDetailAuto = 1;
  ChatCompletionMessageContentPartImageDetailLow = 2;
  ChatCompletionMessageContentPartImageDetailHigh = 3;
}

// ChatCompletionMessageContentPartImageURL contains the URL and detail level of an image.
message ChatCompletionMessageContentPartImageURL {
  // Either a URL of the image or the base64 encoded image data.
  string url = 1;

  // Specifies the detail level of the image.
  optional ChatCompletionMessageContentPartImageDetail detail = 2;
}

// ChatCompletionTool represents a tool that the model can use.
message ChatCompletionTool {
  // The type of the tool. Currently, only "function" is supported.
  string type = 1;

  // The function definition.
  ChatCompletionFunctionDefinition function = 2;
}

// ChatCompletionFunctionDefinition defines a function that the model can call.
message ChatCompletionFunctionDefinition {
  // The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
  // underscores and dashes, with a maximum length of 64.
  string name = 1;

  // A description of what the function does, used by the model to choose when and
  // how to call the function.
  string description = 2;

  // The parameters the functions accepts, described as a JSON Schema object. See the
  // [guide](https://platform.openai.com/docs/guides/function-calling) for examples,
  // and the
  // [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
  // documentation about the format.
  //
  // Omitting `parameters` defines a function with an empty parameter list.
  string parameters = 3;
}

message ChatCompletionToolChoiceOption {
  // The type of the tool choice. Currently, only "none", "auto", "required", and "named" are supported.
  string option = 1;

  // The named tool choice.
  ChatCompletionNamedToolChoice tool_choice = 2;
}

// ChatCompletionNamedToolChoice specifies a tool the model should use.
message ChatCompletionNamedToolChoice {
  // The type of the tool. Currently, only "function" is supported.
  string type = 1;

  // The function to call.
  ChatCompletionNamedToolChoiceFunction function = 2;
}

// ChatCompletionNamedToolChoiceFunction specifies the function to call.
message ChatCompletionNamedToolChoiceFunction {
  // The name of the function to call.
  string name = 1;
}

// ChatCompletionResponseFormatText specifies the desired response format.
message ChatCompletionResponseFormatText {
  // The type of the response format. Must be "text".
  string type = 1;
}

// ChatCompletionResponseFormatJsonObject specifies the desired response format.
message ChatCompletionResponseFormatJsonObject {
  // The type of the response format. Must be "json_object".
  string type = 1;
}

message ChatCompletionResponseFormatJsonSchemaJsonSchema {
  string name = 1;
  string description = 2;
  string schema = 3;
  bool strict = 4;
}

// ChatCompletionResponseFormatJsonSchema specifies the desired response format.
message ChatCompletionResponseFormatJsonSchema {
  // The type of the response format. Must be "json_schema".
  string type = 1;

  // The JSON schema for the response.
  ChatCompletionResponseFormatJsonSchemaJsonSchema json_schema = 2;
}

// ChatCompletionResponseFormat specifies the desired response format.
message ChatCompletionResponseFormat {
  oneof type {
    ChatCompletionResponseFormatText text = 1;
    ChatCompletionResponseFormatJsonObject json_object = 2;
    ChatCompletionResponseFormatJsonSchema json_schema = 3;
  }
}

// ChatCompletionUsage provides token usage information for a completion request.
message ChatCompletionUsage {
  // Number of tokens in the prompt.
  int64 prompt_tokens = 1;

  // Number of tokens in the generated completion.
  int64 completion_tokens = 2;

  // Total number of tokens used in the request (prompt + completion).
  int64 total_tokens = 3;
}

// OpenAIService provides methods for interacting with OpenAI's chat completion API.
service OpenAIService {
  // CreateChatCompletion generates a model response for the given chat conversation.
  rpc CreateChatCompletion(CreateChatCompletionRequest) returns (CreateChatCompletionResponse);

  // CreateChatCompletionStream generates a streaming model response for the given chat conversation.
  // It returns a stream of ChatCompletionChunk messages.
  rpc CreateChatCompletionStream(CreateChatCompletionStreamRequest) returns (stream CreateChatCompletionStreamResponse);
}
